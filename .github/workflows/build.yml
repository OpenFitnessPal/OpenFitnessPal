# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-24.04
            qt_host: linux
            qt_version: '6.8.0'
            qt_arch: gcc_64

          - os: ubuntu-24.04
            qt_host: linux
            qt_target: android
            qt_arch: android_arm64_v8a
            qt_version: '6.8.0'

          - os: windows-latest
            qt_host: windows
            qt_version: '6.8.0'
            qt_arch: win64_msvc2022_64

          - os: macos-latest
            qt_host: mac
            qt_version: '6.8.0'
            qt_arch: clang_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        tag_name=$(git describe --tags --abbrev=0)
        echo "VERSION=$tag_name" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
        echo "INSTALL_DIR=${{ github.workspace }}/install" >> $GITHUB_ENV
        echo "INSTALL_APPIMAGE_DIR=${{ github.workspace }}/install-appdir" >> $GITHUB_ENV
        echo "DATE=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_ENV

    - name: Install MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install CMake
      uses: lukka/get-cmake@v3.28.1

    - name: Setup CCache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ inputs.build_type }}

    - name: Cache Build Deps
      uses: actions/cache@v4
      with:
        path: ${{ env.BUILD_DIR }}/_deps/*-src
        key: OpenFitnessPal

    - uses: repolevedavaj/install-nsis@v1.0.2
      if: runner.os == 'Windows'
      with:
        nsis-version: 3.08

    - name: Install Qt ${{ matrix.qt_version }}
      uses: jurplel/install-qt-action@v4.1.1
      with:
        cache: on
        version: ${{ matrix.qt_version }}
        modules: qtvirtualkeyboard qtshadertools

    - name: Install Qt ${{ matrix.qt_version }} (Android)
      if: matrix.qt_target == 'android'
      uses: jurplel/install-qt-action@v4.1.1
      with:
        cache: on
        version: ${{ matrix.qt_version }}
        target: ${{ matrix.qt_target }}
        arch: ${{ matrix.qt_arch }}
        modules: qtvirtualkeyboard qtshadertools

    - name: Install Build Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install llvm ninja coreutils

    - name: Prepare AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      run: |
        sudo apt-get install libstdc++-10-dev gcc-10 ninja-build openjdk-17-jdk
        wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
        wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

    - name: Configure (Linux)
      if: runner.os == 'Linux'
      run: |
        declare QTPATH="${{ runner.workspace }}/Qt/${{ matrix.qt_version }}"

        cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DCMAKE_TOOLCHAIN_FILE=$QTPATH/${{ matrix.qt_arch }}/lib/cmake/Qt6/qt.toolchain.cmake -DQT_HOST_PATH=$QTPATH/gcc_64 -DQT_HOST_PATH_CMAKE_DIR=$QTPATH/${{ matrix.qt_arch }}/lib/cmake -DCMAKE_PREFIX_PATH=$QTPATH/${{ matrix.qt_arch }}/lib/cmake -G "Ninja"

    - name: Configure (Windows)
      if: runner.os == 'Windows' || runner.os == 'macOS'
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }} -G "Ninja" -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}

    - name: Build
      run: |
        cmake --build ${{ env.BUILD_DIR }} --config ${{ inputs.build_type }} --parallel $(nproc)

    - name: Package (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      run: |
        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}/usr

        cd ${{ env.INSTALL_DIR }}
        tar --owner root --group root -czf ../OpenFitnessPal.tar.gz *

    - name: Sign APK (Android)
      if: runner.os == 'Linux' && matrix.qt_target == 'android' && inputs.build_type == 'Release'
      uses: r0adkll/sign-android-release@v1
      id: sign_apk
      with:
        # The directory to find your release to sign
        releaseDirectory: ${{ env.BUILD_DIR }}/android-build/build/outputs/apk/release
        # The key used to sign your release in base64 encoded format
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        # The key alias
        alias: ${{ secrets.ALIAS }}
        # The password to the keystore
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        # wee woo
        keyPassword: ${{ secrets.KEYSTORE_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"

    - name: Package AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      shell: bash
      run: |
        sudo apt-get install libxcb-cursor-dev libxcb-cursor0
        sudo cmake --install ${{ env.BUILD_DIR }}/_deps/ofplib-build --prefix=/usr

        mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/{lib,qml/QtCore,bin}

        cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr

        export OUTPUT="OpenFitnessPal-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"
        export QML_SOURCES_PATHS="${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}/qml"

        cp -r ${QML_SOURCES_PATHS}/QtCore/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/qml/QtCore

        chmod +x linuxdeploy-*.AppImage

        cp -r ${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/gcc_64/plugins/ ${{ env.INSTALL_APPIMAGE_DIR }}/usr/

        cp /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/
        cp /usr/lib/x86_64-linux-gnu/libssl.so.1.1 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/

        ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_APPIMAGE_DIR }} --output appimage --plugin qt

    - name: Package (macOS)
      if: runner.os == 'macOS'
      run: |
        export PATH="$PATH;${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/*/bin"
        export QML_SOURCES_PATHS="${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/macos/qml"

        ls ${{ runner.workspace }}/Qt/${{ matrix.qt_version }}

        cd ${{ env.BUILD_DIR }}
        ls $QML_SOURCES_PATHS
        macdeployqt OFP.app -qmldir=$QML_SOURCES_PATHS -qmlimport=$QML_SOURCES_PATHS
        ls

        mv OFP.app OpenFitnessPal.app

        sudo codesign --sign - --deep --force --entitlements ../program_info/App.entitlements --options runtime OpenFitnessPal.app/Contents/MacOS/OpenFitnessPal
        chmod a+x OpenFitnessPal.app/Contents/MacOS/OpenFitnessPal
        cp ../program_info/OpenFitnessPal.icns OpenFitnessPal.app/Contents/Resources
        tar czf ../OpenFitnessPal.tar.gz OpenFitnessPal.app

    - name: Package (Windows, Portable)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        mkdir ${{ env.INSTALL_DIR }}
        set PATH=%PATH%;"${{ runner.workspace }}\Qt\${{ matrix.qt_version }}\msvc2022_64\bin"

        windeployqt ${{ env.BUILD_DIR }}\OpenFitnessPal.exe --dir ${{ env.INSTALL_DIR }} --qmldir %QML2_IMPORT_PATH%

        cp -r ${{ runner.workspace }}\Qt\${{ matrix.qt_version }}\msvc2022_64\qml ${{ env.INSTALL_DIR }}
        cp ${{ env.BUILD_DIR }}\OpenFitnessPal.exe ${{ env.INSTALL_DIR }}
        cp ${{ env.BUILD_DIR }}\_deps\ofplib-build\ofp.dll ${{ env.INSTALL_DIR }}

        if "${{ inputs.build_type }}" == "Debug" (
          cp C:\Windows\System32\ucrtbased.dll ${{ env.INSTALL_DIR }}
          cp ${{ runner.workspace }}\Qt\${{ matrix.qt_version }}\msvc2022_64\bin\Qt6QmlCored.dll ${{ env.INSTALL_DIR }}
        ) else (
          cp C:\Windows\System32\ucrtbase.dll ${{ env.INSTALL_DIR }}
          cp ${{ runner.workspace }}\Qt\${{ matrix.qt_version }}\msvc2022_64\bin\Qt6QmlCore.dll ${{ env.INSTALL_DIR }}
        )

    - name: Package (Windows, Installer)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd ${{ env.INSTALL_DIR }}
        ls ..
        makensis -NOCD "${{ github.workspace }}\build\program_info\win_install.nsi"

      ##
      # UPLOAD BUILDS
      ##

    - name: Upload Release APK (Linux)
      if: runner.os == 'Linux' && matrix.qt_target == 'android' && inputs.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-Android-APK-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{steps.sign_apk.outputs.signedReleaseFile}}

    - name: Upload Debug APK (Linux)
      if: runner.os == 'Linux' && matrix.qt_target == 'android' && inputs.build_type == 'Debug'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-Android-APK-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.BUILD_DIR }}/android-build/build/outputs/apk/debug/android-build-debug.apk

    - name: Upload portable tarball (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-${{ runner.os }}-Binary-${{ env.VERSION }}-${{ inputs.build_type }}
        path: OpenFitnessPal.tar.gz

    - name: Upload AppImage (Linux)
      if: runner.os == 'Linux' && matrix.qt_arch == 'gcc_64'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
        path: OpenFitnessPal-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage

    - name: Upload tarball (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}
        path: OpenFitnessPal.tar.gz

    - name: Upload portable zip (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-Windows-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
        path: ${{ env.INSTALL_DIR }}/**

    - name: Upload installer (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: OpenFitnessPal-${{ runner.os }}-Setup-${{ env.VERSION }}-${{ inputs.build_type }}
        path: OpenFitnessPal-Setup.exe
